<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java定时任务</title>
    <link href="/2023/03/14/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/03/14/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>工具:<a href="https://tool.lu/crontab/">cron表达式检查</a><br>各种任务示例:<a href="https://mp.weixin.qq.com/s?__biz=MzUzMTA2NTU2Ng==&mid=2247490679&idx=1&sn=25374dbdcca95311d41be5d7b7db454d&chksm=fa4963c6cd3eead055bb9cd10cca13224bb35d0f7373a27aa22a55495f71e24b8273a7603314&scene=27#wechat_redirect">demo</a></p><h3 id="jdk自带Timer"><a href="#jdk自带Timer" class="headerlink" title="jdk自带Timer"></a>jdk自带Timer</h3><p><mark>缺点: 1、Timer 是单线程的，假如有任务 A,B,C，任务 A 如果执行时间比较长，那么就会影响任务 B,C 的启动和执行时间，如果 B,C 执行时间也比较长，那就会相互影响;  </p><p><mark>&emsp;&emsp;  2、Timer 不会捕获异常，如果 A,B,C 任何一个任务在执行过程中发生异常，就会导致 TImer 整个定时任务停止工作;  </p><p><mark>&emsp;&emsp;  3、Timer 是基于绝对时间调度的，而不是基于相对时间，所以它对系统时间的改变非常敏感;</p><p>示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoSomethingTimerTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span> &#123;<br><br><br><br>    <span class="hljs-keyword">private</span> String taskName;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DoSomethingTimerTask</span><span class="hljs-params">(String taskName)</span> &#123;<br><br>        <span class="hljs-built_in">this</span>.taskName = taskName;<br><br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; : 任务「&quot;</span> + taskName + <span class="hljs-string">&quot;」被执行。&quot;</span>);<br><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>场景一:指定延迟执行一次  参数单位:ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayOneDemo</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoSomethingTimerTask</span>(<span class="hljs-string">&quot;DelayOneDemo&quot;</span>),<span class="hljs-number">1000L</span>);<br><br>    &#125;<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>场景二:固定间隔执行  参数单位:ms  &emsp;param1:延迟执行 &emsp;param2:间隔时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PeriodDemo</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoSomethingTimerTask</span>(<span class="hljs-string">&quot;PeriodDemo&quot;</span>),<span class="hljs-number">2000L</span>,<span class="hljs-number">1000L</span>);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>场景三:固定速率执行 参数单位:ms  &emsp;param1:延迟执行 &emsp;param2:间隔时间  </p><p><mark>不同点:场景二侧重间隔,任务超时了,按照新的间隔规律运行;例如n次任务超时执行后,n+1次会立即执行,n+1次后又会按照间隔执行  </p><p> &emsp;&emsp;&emsp;场景三:侧重固定速率,任务超时后,会追赶到原有的执行速率;例如当创建任务后,每次执行的时间点是固定的,但如果有任务超时执行,n+1次会立即执行,    且n+2次会按照之前设定的时间点执行</p><mark><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedRateDemo</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br><br>        timer.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoSomethingTimerTask</span>(<span class="hljs-string">&quot;FixedRateDemo&quot;</span>),<span class="hljs-number">2000L</span>,<span class="hljs-number">1000L</span>);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="jdk自带ScheduledExecutorService"><a href="#jdk自带ScheduledExecutorService" class="headerlink" title="jdk自带ScheduledExecutorService"></a>jdk自带ScheduledExecutorService</h3><pre><code class="hljs">是基于线程池设计的定时任务类</code></pre><p><mark>需要注意：只有当执行调度任务时，ScheduledExecutorService才会真正启动一个线程，其余时间ScheduledExecutorService都是出于轮询任务的状态</p></mark>  <pre><code class="hljs">场景一:scheduleAtFixedRate方法，按指定频率周期执行某个任务;&lt;mark&gt;如果任务执行时间超过间隔时间,任务执行完会立即执行下一次&lt;/mark&gt;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleAtFixedRateDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br><br>        executor.scheduleAtFixedRate(<br><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleAtFixedRateDemo</span>(),<br><br>                <span class="hljs-number">0</span>,<br><br>                <span class="hljs-number">1000</span>,<br><br>                TimeUnit.MILLISECONDS);<br><br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; : 任务「ScheduleAtFixedRateDemo」被执行。&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            Thread.sleep(<span class="hljs-number">2000L</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>场景二:scheduleWithFixedDelay方法，按指定频率间隔执行某个任务</p><pre><code class="hljs">&lt;mark&gt;scheduleWithFixedDelay是不管任务执行多久，都会等上一次任务执行完毕后再延迟delay后去执行下次任务&lt;/mark&gt;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleAtFixedRateDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br><br>        executor.scheduleWithFixedDelay(<br><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduleAtFixedRateDemo</span>(),<br><br>                <span class="hljs-number">0</span>,<br><br>                <span class="hljs-number">1000</span>,<br><br>                TimeUnit.MILLISECONDS);<br><br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; : 任务「ScheduleAtFixedRateDemo」被执行。&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br><br>            Thread.sleep(<span class="hljs-number">2000L</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><br>            e.printStackTrace();<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Quartz框架实现"><a href="#Quartz框架实现" class="headerlink" title="Quartz框架实现"></a>Quartz框架实现</h3><p>Quartz通常有三部分组成：调度器（Scheduler）、任务（JobDetail）、触发器（Trigger，包括SimpleTrigger和CronTrigger<br><strong>优点： 可以与 Spring 集成，并且支持动态添加任务和集群。</strong><br><strong>缺点 ：分布式支持不友好，没有内置 UI 管理控制台、使用麻烦（相比于其他同类型框架来说）</strong><br><strong><mark>QuartzScheduler是天生就可以支持远程调度的(通过rmi远程触发调度, 调度的管理和调度的执行可以分离) 待补充。。。</mark></strong><br>使用Quartz，首先需要在项目的pom文件中引入相应的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;<br>&lt;artifactId&gt;quartz&lt;/artifactId&gt;<br>&lt;version&gt;2.3.2&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;<br>&lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;<br>&lt;version&gt;2.3.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>SimpleTrigger示例：<br>定义执行任务的Job，这里要实现Quartz提供的Job接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() + <span class="hljs-string">&quot; : 任务「PrintJob」被执行。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建Scheduler和Trigger，并执行定时任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyScheduler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        <span class="hljs-comment">// 1、创建调度器Scheduler</span><br>        <span class="hljs-type">SchedulerFactory</span> <span class="hljs-variable">schedulerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StdSchedulerFactory</span>();<br>        <span class="hljs-type">Scheduler</span> <span class="hljs-variable">scheduler</span> <span class="hljs-operator">=</span> schedulerFactory.getScheduler();<br>        <span class="hljs-comment">// 2、创建JobDetail实例，并与PrintJob类绑定(Job执行内容)</span><br>        <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(PrintJob.class)<br>                .withIdentity(<span class="hljs-string">&quot;job&quot;</span>, <span class="hljs-string">&quot;group&quot;</span>).build();<br>        <span class="hljs-comment">// 3、构建Trigger实例，每隔1s执行一次</span><br>        <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="hljs-string">&quot;trigger&quot;</span>, <span class="hljs-string">&quot;triggerGroup&quot;</span>)<br>                .startNow()<span class="hljs-comment">//立即生效</span><br>                .withSchedule(SimpleScheduleBuilder.simpleSchedule()<br>                        .withIntervalInSeconds(<span class="hljs-number">1</span>)<span class="hljs-comment">//每隔1s执行一次</span><br>                        .repeatForever()).build();<span class="hljs-comment">//一直执行</span><br><br>        <span class="hljs-comment">//4、Scheduler绑定Job和Trigger，并执行</span><br>        scheduler.scheduleJob(jobDetail, trigger);<br>        System.out.println(<span class="hljs-string">&quot;--------scheduler start ! ------------&quot;</span>);<br>        scheduler.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CronTrigger示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.quartz.impl.StdSchedulerFactory;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.quartz.CronScheduleBuilder.cronSchedule;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.quartz.JobBuilder.newJob;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.quartz.TriggerBuilder.newTrigger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是你的定时任务: &quot;</span> + JSON.toJSONString( jobExecutionContext.getJobDetail()));<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取到一个StdScheduler, StdScheduler其实是QuartzScheduler的一个代理</span><br>            <span class="hljs-type">Scheduler</span> <span class="hljs-variable">scheduler</span> <span class="hljs-operator">=</span> StdSchedulerFactory.getDefaultScheduler();<br><br>            <span class="hljs-comment">// 启动Scheduler</span><br>            scheduler.start();<br>            <span class="hljs-comment">// 新建一个Job, 指定执行类是QuartzTest(需实现Job), 指定一个K/V类型的数据, 指定job的name和group</span><br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">job</span> <span class="hljs-operator">=</span> newJob(QuartzTest.class)<br>                    .usingJobData(<span class="hljs-string">&quot;jobData&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)<br>                    .withIdentity(<span class="hljs-string">&quot;myJob&quot;</span>, <span class="hljs-string">&quot;group1&quot;</span>)<br>                    .build();<br>            <span class="hljs-comment">// 新建一个Trigger, 表示JobDetail的调度计划, 这里的cron表达式是 每10秒执行一次</span><br>            <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> newTrigger()<br>                    .withIdentity(<span class="hljs-string">&quot;myTrigger&quot;</span>, <span class="hljs-string">&quot;group1&quot;</span>)<br>                    .startNow()<br>                    .withSchedule(cronSchedule(<span class="hljs-string">&quot;0/10 * * * * ?&quot;</span>))<br>                    .build();<br><br><br>            <span class="hljs-comment">// 让scheduler开始调度这个job, 按trigger指定的计划</span><br>            scheduler.scheduleJob(job, trigger);<br><br><br>            <span class="hljs-comment">// 保持进程不被销毁</span><br>           <span class="hljs-comment">//  scheduler.shutdown();</span><br>            Thread.sleep(<span class="hljs-number">10000000</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException se) &#123;<br>            se.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><mark>quartz的cron表达式和linux下crontab的cron表达式是有一定区别的, 它可以直接到秒级别:</mark></strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">1. Seconds<br>2. Minutes<br>3. Hours<br>4. Day-of-Month<br>5. Month<br>6. Day-of-Week<br>7. Year (optional field)<br><br>例如: &quot;0 0 12？* WED&quot; - 这意味着&quot;每个星期三下午12:00&quot;。<br></code></pre></td></tr></table></figure><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h3><p>spring自带了一套定时任务工具Spring-Task,支持注解和配置文件两种形式</p><p>基于注解的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;taskJob&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskJob</span> &#123;<br><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0 3 * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过cron定义的定时任务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Scheduled(fixedDelay = 1000L)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过fixedDelay定义的定时任务&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Scheduled(fixedRate = 1000L)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">job3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;通过fixedRate定义的定时任务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="业界分布部署定时任务的解决方案"><a href="#业界分布部署定时任务的解决方案" class="headerlink" title="业界分布部署定时任务的解决方案"></a>业界分布部署定时任务的解决方案</h3><h4 id="1、使用-DB-或者-Zookeeper、redis-抢锁"><a href="#1、使用-DB-或者-Zookeeper、redis-抢锁" class="headerlink" title="1、使用 DB 或者 Zookeeper、redis 抢锁"></a>1、使用 DB 或者 Zookeeper、redis 抢锁</h4><p><img src="img.png"><br>1、定时时间到了，在回调方法里，先去抢锁。<br>2、抢到锁，则继续执行方法，没抢到锁直接返回。<br>3、执行完方法后，释放锁。<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每分钟的第30秒跑一次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;30 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">task1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;task1&quot;</span>;<br>        <span class="hljs-keyword">if</span> (tryLock(lockName)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello cron&quot;</span>);<br>            releaseLock(lockName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String lockName)</span> &#123;<br>        <span class="hljs-comment">//TODO</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseLock</span><span class="hljs-params">(String lockName)</span> &#123;<br>        <span class="hljs-comment">//TODO</span><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><mark>上述示例代码还是有可能导致任务重复执行的。比如任务执行的非常快， A 这台机器抢到锁， 执行完任务后很快就释放锁了。B 这台机器后抢锁，还是会抢到锁，再执行一遍任务。</mark></strong></p><h3 id="ElasticJob开源实现"><a href="#ElasticJob开源实现" class="headerlink" title="ElasticJob开源实现"></a>ElasticJob开源实现</h3><p><a href="https://github.com/apache/shardingsphere-elasticjob">Github</a><br><a href="https://shardingsphere.apache.org/elasticjob/index_zh.html">官方网站</a><br><strong>是一款基于 Quartz 开发，依赖 Zookeeper 作为注册中心、轻量级、无中心化的分布式任务调度框架</strong><br><strong>优点 ：可以与 Spring 集成、支持分布式、支持集群、性能不错</strong><br><strong>缺点 ：依赖了额外的中间件比如 Zookeeper（复杂度增加，可靠性降低、维护成本变高;不支持动态创建任务。</strong><br>ElasticJob 相对于 Quartz 来说，从功能上最大的区别就是支持分片，可以将一个任务分片参数分发给不同的机器执行。<br>架构上最大的区别就是使用 Zookeeper 作为注册中心，不同的任务分配给不同的节点调度，不需要抢锁触发，性能上比 Quartz 上强大很多，架构图如下：<br><img src="img_1.png"><br>开发上也比较简单，和 springboot 结合比较好，可以在配置文件定义任务如下<br>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">elasticjob:</span><br>  <span class="hljs-attr">regCenter:</span><br>    <span class="hljs-attr">serverLists:</span> <span class="hljs-string">localhost:2181</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">elasticjob-lite-springboot</span><br>  <span class="hljs-attr">jobs:</span><br>    <span class="hljs-attr">simpleJob:</span><br>      <span class="hljs-attr">elasticJobClass:</span> <span class="hljs-string">org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootSimpleJob</span><br>      <span class="hljs-attr">cron:</span> <span class="hljs-number">0</span><span class="hljs-string">/5</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">?</span><br>      <span class="hljs-attr">timeZone:</span> <span class="hljs-string">GMT+08:00</span><br>      <span class="hljs-attr">shardingTotalCount:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">shardingItemParameters:</span> <span class="hljs-number">0</span><span class="hljs-string">=Beijing,1=Shanghai,2=Guangzhou</span><br>    <span class="hljs-attr">scriptJob:</span><br>      <span class="hljs-attr">elasticJobType:</span> <span class="hljs-string">SCRIPT</span><br>      <span class="hljs-attr">cron:</span> <span class="hljs-number">0</span><span class="hljs-string">/10</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">?</span><br>      <span class="hljs-attr">shardingTotalCount:</span> <span class="hljs-number">3</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">script.command.line:</span> <span class="hljs-string">&quot;echo SCRIPT Job: &quot;</span><br>    <span class="hljs-attr">manualScriptJob:</span><br>      <span class="hljs-attr">elasticJobType:</span> <span class="hljs-string">SCRIPT</span><br>      <span class="hljs-attr">jobBootstrapBeanName:</span> <span class="hljs-string">manualScriptJobBean</span><br>      <span class="hljs-attr">shardingTotalCount:</span> <span class="hljs-number">9</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">script.command.line:</span> <span class="hljs-string">&quot;echo Manual SCRIPT Job: &quot;</span><br></code></pre></td></tr></table></figure><p>实现任务接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBootShardingJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SimpleJob</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(ShardingContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;分片总数=&quot;</span>+context.getShardingTotalCount() + <span class="hljs-string">&quot;, 分片号=&quot;</span>+context.getShardingItem()<br>            + <span class="hljs-string">&quot;, 分片参数=&quot;</span>+context.getShardingParameter());<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">运行结果如下：<br><br>分片总数=3, 分片号=0, 分片参数=Beijing<br>分片总数=3, 分片号=1, 分片参数=Shanghai<br>分片总数=3, 分片号=2, 分片参数=Guangzhou<br></code></pre></td></tr></table></figure><h3 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h3><p><a href="https://github.com/xuxueli/xxl-job">Github</a><br><strong>是一款优秀的轻量级分布式任务调度框架，支持任务可视化管理、弹性扩容缩容、任务失败重试和告警、任务分片等功能</strong><br><strong>优点：XXL-JOB 相较于 ElasticJob，最大的特点就是功能比较丰富，可运维能力比较强，不但支持控制台动态创建任务，还有调度日志、运行报表等功能。</strong><br><strong>缺点：XXL-JOB 所有功能都依赖数据库，且调度中心不支持分布式架构，在任务量和调度量比较大的情况下，会有性能瓶颈;不支持动态添加任务（如果一定想要动态创建任务也是支持的，参见：<a href="https://github.com/xuxueli/xxl-job/issues/277">xxl-job issue277</a>）</strong></p><p>XXL-JOB 是 Master-Slave 架构，Master 负责任务的调度，Slave 负责任务的执行，架构图如下：<br><img src="img_2.png"><br>从上图可以看出，XXL-JOB 由 调度中心 和 执行器 两大部分组成。调度中心主要负责任务管理、执行器管理以及日志管理。执行器主要是接收调度信号并处理。另外，调度中心进行任务调度时，是通过自研 RPC 来实现的。<br>不同于 Elastic-Job 的去中心化设计， XXL-JOB 的这种设计也被称为中心化设计（调度中心调度多个执行器执行任务）。<br><mark>注意：<br>和 Quzrtz 类似 XXL-JOB 也是基于数据库锁调度任务，存在性能瓶颈。不过，一般在任务量不是特别大的情况下，没有什么影响的，可以满足绝大部分公司的要求。</p><p>不要被 XXL-JOB 的架构图给吓着了，实际上，我们要用 XXL-JOB 的话，只需要重写 IJobHandler 自定义任务执行逻辑就可以了，非常易用！</mark><br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JobHandler(value=&quot;myApiJobHandler&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApiJobHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IJobHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">execute</span><span class="hljs-params">(String param)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//......</span><br>        <span class="hljs-keyword">return</span> ReturnT.SUCCESS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于注解<br>示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@XxlJob(&quot;myAnnotationJobHandler&quot;)</span><br><span class="hljs-keyword">public</span> ReturnT&lt;String&gt; <span class="hljs-title function_">myAnnotationJobHandler</span><span class="hljs-params">(String param)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-comment">//......</span><br>  <span class="hljs-keyword">return</span> ReturnT.SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PowerJob"><a href="#PowerJob" class="headerlink" title="PowerJob"></a>PowerJob</h3><p><a href="http://www.powerjob.tech/">官网</a><br><a href="https://github.com/KFCFans/PowerJob">Github</a><br><strong>分布式任务调度领域的新星。目前，已经有很多公司接入比如 OPPO、京东、中通、思科;对标SchedulerX</strong><br><img src="img_3.png"></p>]]></content>
    
    
    <categories>
      
      <category>定时任务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>定时任务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot配置加载顺序</title>
    <link href="/2023/03/11/Springboot%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <url>/2023/03/11/Springboot%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>Spring Boot 不仅可以通过配置文件进行配置，还可以通过环境变量、命令行参数等多种形式进行配置</p><h3 id="springboot-配置优先级"><a href="#springboot-配置优先级" class="headerlink" title="springboot 配置优先级"></a>springboot 配置优先级</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">以下是常用的 Spring Boot 配置形式及其加载顺序（优先级由高到低）：<br><br>命令行参数<br>来自 java:comp/env 的 JNDI 属性<br>Java 系统属性（System.getProperties()）<br>操作系统环境变量<br>RandomValuePropertySource 配置的 random.* 属性值<br>配置文件（YAML 文件、Properties 文件）<br>@Configuration 注解类上的 @PropertySource 指定的配置文件<br>通过 SpringApplication.setDefaultProperties 指定的默认属性<br>以上所有形式的配置都会被加载，当存在相同配置内容时，高优先级的配置会覆盖低优先级的配置；<br>存在不同的配置内容时， 高优先级和低优先级的配置内容取并集，共同生效，形成互补配置。<br></code></pre></td></tr></table></figure><p><strong><font color='red'>命令行参数与系统参数的区别:<br>通过@Value形式可以获得系统参数和命令行参数，但通过System.getProperty方法只能获得系统参数<br></font></strong></p><h4 id="1、命令行参数"><a href="#1、命令行参数" class="headerlink" title="1、命令行参数"></a>1、命令行参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar &#123;Jar文件名&#125; --&#123;参数1&#125;=&#123;参数值1&#125; --&#123;参数2&#125;=&#123;参数值2&#125;<br>示例:<br>java -jar springbootdemo-0.0.1-SNAPSHOT.jar --server.port=8081 --server.servlet.context-path=/bcb<br></code></pre></td></tr></table></figure><h4 id="2、系统参数"><a href="#2、系统参数" class="headerlink" title="2、系统参数"></a>2、系统参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar -D&#123;参数1&#125;=&#123;参数值1&#125; -D&#123;参数2&#125;=&#123;参数值2&#125; &#123;Jar文件名&#125;<br>示例:<br>java -jar -Dserver.port=8081 xxx.jar<br></code></pre></td></tr></table></figure><h3 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h3><p>Spring Boot 启动时，会自动加载 JAR 包内部及 JAR 包所在目录指定位置的配置文件（Properties 文件、YAML 文件），下图中展示了 Spring Boot 自动加载的配置文件的位置及其加载顺序，同一位置下，Properties 文件优先级高于 YAML 文件。<br><img src="source/_posts/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/img.png"><br>application.yml：默认配置<br>application-dev.yml：开发环境配置<br>application-test.yml：测试环境配置<br>application-prod.yml：生产环境配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">示例:<br>server:<br>  port: 8080 <span class="hljs-comment">#端口号</span><br>  servlet:<br>    context-path: /mybootdemo <span class="hljs-comment">#上下文路径或项目访问路径</span><br>spring:<br>  profiles:<br>    active: dev <span class="hljs-comment">#激活开发环境配置</span><br></code></pre></td></tr></table></figure><p>可以通过修改启动参数来改变文件查找规则<br>配置spring.config.name和spring.config.location参数来修改Spring Boot的配置文件查找规则<br>在下面的命令中，使用–spring.config.name=myapp指定要使用名为myapp的配置文件。使用–spring.config.location=/path/to/config/指定配置文件的目录。Spring Boot将在该目录中查找名为myapp.properties或myapp.yml的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar myapp.jar --spring.config.name=myapp --spring.config.location=/path/to/config/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java远程调试</title>
    <link href="/2023/03/07/Java%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <url>/2023/03/07/Java%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="cvm部署debug"><a href="#cvm部署debug" class="headerlink" title="cvm部署debug"></a>cvm部署debug</h3><h4 id="1、-idea配置"><a href="#1、-idea配置" class="headerlink" title="1、  idea配置"></a>1、  idea配置</h4><p><img src="img_1.png"><br><img src="img_2.png"><br><img src="img_3.png"></p><h4 id="2、-远程启动"><a href="#2、-远程启动" class="headerlink" title="2、 远程启动"></a>2、 远程启动</h4><p><img src="img_4.png"></p><h3 id="Docker远程部署"><a href="#Docker远程部署" class="headerlink" title="Docker远程部署"></a>Docker远程部署</h3><h5 id="1、-idea配置与cvm一样"><a href="#1、-idea配置与cvm一样" class="headerlink" title="1、 idea配置与cvm一样"></a>1、 idea配置与cvm一样</h5><h5 id="2、-dockerfile暴漏debug端口"><a href="#2、-dockerfile暴漏debug端口" class="headerlink" title="2、 dockerfile暴漏debug端口"></a>2、 dockerfile暴漏debug端口</h5><p><img src="img_5.png"></p><h4 id="3、-start-sh启动脚本的内容如下"><a href="#3、-start-sh启动脚本的内容如下" class="headerlink" title="3、 start.sh启动脚本的内容如下"></a>3、 start.sh启动脚本的内容如下</h4><p><img src="img_6.png"></p><h4 id="4、-打镜像并映射容器debug端口"><a href="#4、-打镜像并映射容器debug端口" class="headerlink" title="4、 打镜像并映射容器debug端口"></a>4、 打镜像并映射容器debug端口</h4><p><img src="img_7.png"><img src="img_8.png"><img src="img_9.png"><img src="img_10.png"></p><h3 id="kuberneters-远程debug"><a href="#kuberneters-远程debug" class="headerlink" title="kuberneters 远程debug"></a>kuberneters 远程debug</h3><h4 id="1、-idea配置与cvm一样-1"><a href="#1、-idea配置与cvm一样-1" class="headerlink" title="1、 idea配置与cvm一样"></a>1、 idea配置与cvm一样</h4><h4 id="2、-dockerfile暴漏debug端口-1"><a href="#2、-dockerfile暴漏debug端口-1" class="headerlink" title="2、 dockerfile暴漏debug端口"></a>2、 dockerfile暴漏debug端口</h4><p><img src="img_5.png"></p><h4 id="3、-start-sh启动脚本的内容如下-1"><a href="#3、-start-sh启动脚本的内容如下-1" class="headerlink" title="3、 start.sh启动脚本的内容如下"></a>3、 start.sh启动脚本的内容如下</h4><p><img src="img_6.png"></p><h4 id="4、-打镜像"><a href="#4、-打镜像" class="headerlink" title="4、 打镜像"></a>4、 打镜像</h4><p><img src="img_7.png"></p><h4 id="5、-上传镜像"><a href="#5、-上传镜像" class="headerlink" title="5、 上传镜像"></a>5、 上传镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker push myuser/remote_debug<br></code></pre></td></tr></table></figure><h4 id="6、-创建Kubernetes-Deployment"><a href="#6、-创建Kubernetes-Deployment" class="headerlink" title="6、 创建Kubernetes Deployment"></a>6、 创建Kubernetes Deployment</h4><p>使用Kubernetes Deployment创建一个Pod，该Pod包含刚刚上传到Docker Hub的镜像，并将30435端口暴露出来以进行远程调试。例如，Deployment可以如下所示： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">remote_debug</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">remote_debug</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">remote_debug</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">remote_debug</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">myuser/remote_debug</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">30435</span><br></code></pre></td></tr></table></figure><p>使用kubectl apply命令创建Deployment：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl apply -f deployment.yaml<br></code></pre></td></tr></table></figure><h4 id="7、-将容器端口映射到本地端口"><a href="#7、-将容器端口映射到本地端口" class="headerlink" title="7、 将容器端口映射到本地端口"></a>7、 将容器端口映射到本地端口</h4><p>使用kubectl port-forward命令将容器端口30435映射到本地端口5005。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl port-forward pod/remote_debug-xxxxxxxxxx-yyyyy 30435:30435<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>远程调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>远程调试</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go远程调试</title>
    <link href="/2023/02/20/Go%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <url>/2023/02/20/Go%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="makefile-demo"><a href="#makefile-demo" class="headerlink" title="makefile demo"></a>makefile demo</h3><p>//编译 make all os=linux 或者单组件编译 make api os=linux</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs makefile">TARGET=sch api res<br><br>MAIN_MODULE=git.hub.fda/demo/core<br>os ?= linux<br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(os)</span>, linux)<br>   GO=CGO_ENABLED=0 GOOS=linux go<br><span class="hljs-keyword">else</span><br>   GO=CGO_ENABLED=0 go<br><span class="hljs-keyword">endif</span><br><br>FLAG=-gcflags <span class="hljs-string">&quot;all=-N -l&quot;</span><br><br>SRC_DIR=.<br>PKG_SRC_DIR=./pkg<br>PKG_SRC_SUB_DIR=<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find <span class="hljs-variable">$(PKG_SRC_DIR)</span> ! -path <span class="hljs-variable">$(PKG_SRC_DIR)</span> -type d)</span><br><br>SRC_EXT=.go<br><br>SRC_FILE=<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find &#x27;<span class="hljs-variable">$(SRC_DIR)</span>&#x27; -type f -name &#x27;*<span class="hljs-variable">$(SRC_EXT)</span>&#x27;)</span><br>PKG_SRC_FILE=<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> find &#x27;<span class="hljs-variable">$(PKG_SRC_DIR)</span>&#x27; -type f -name &#x27;*<span class="hljs-variable">$(SRC_EXT)</span>&#x27;)</span><br>PKG_MODULE=<span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> .%, <span class="hljs-variable">$(MAIN_MODULE)</span>%, <span class="hljs-variable">$(PKG_SRC_SUB_DIR)</span>)</span><br><br><span class="hljs-section">all: <span class="hljs-variable">$(TARGET)</span></span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: res</span><br><span class="hljs-section">res:</span><br>   <span class="hljs-variable">$(GO)</span> build -o <span class="hljs-variable">$@</span>/<span class="hljs-variable">$@</span> <span class="hljs-variable">$(FLAG)</span> <span class="hljs-variable">$(MAIN_MODULE)</span>/<span class="hljs-variable">$@</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: api</span><br><span class="hljs-section">api:</span><br>   <span class="hljs-variable">$(GO)</span> build -o <span class="hljs-variable">$@</span>/<span class="hljs-variable">$@</span> <span class="hljs-variable">$(FLAG)</span> <span class="hljs-variable">$(MAIN_MODULE)</span>/<span class="hljs-variable">$@</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: sche</span><br><span class="hljs-section">sche:</span><br>   <span class="hljs-variable">$(GO)</span> build -o <span class="hljs-variable">$@</span>/<span class="hljs-variable">$@</span> <span class="hljs-variable">$(FLAG)</span> <span class="hljs-variable">$(MAIN_MODULE)</span>/<span class="hljs-variable">$@</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: pkg</span><br><span class="hljs-section">pkg:</span><br>   <span class="hljs-variable">$(GO)</span> build <span class="hljs-variable">$(PKG_MODULE)</span><br><br><span class="hljs-section">testpkg:</span><br>   <span class="hljs-variable">$(GO)</span> test -v -count=1 <span class="hljs-variable">$(PKG_MODULE)</span><br><br><span class="hljs-section">clean:</span><br>   rm -f <span class="hljs-variable">$(TARGET)</span><br><br><span class="hljs-section">fmt: ## gofmt and goimports all go files</span><br>   find . -name &#x27;*.go&#x27; -not -wholename &#x27;./vendor/*&#x27; | while read -r file; do gofmt -w -s <span class="hljs-string">&quot;$$file&quot;</span>; goimports -w <span class="hljs-string">&quot;$$file&quot;</span>; done<br><br><span class="hljs-section">print:</span><br>   @echo <span class="hljs-string">&quot;pkg dir: <span class="hljs-variable">$(PKG_SRC_SUB_DIR)</span>&quot;</span><br>   @echo <span class="hljs-string">&quot;pkg module: <span class="hljs-variable">$(PKG_MODULE)</span>&quot;</span><br>   @echo <span class="hljs-string">&quot;src file: <span class="hljs-variable">$(SRC_FILE)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1、模块编译时添加debug标示"><a href="#1、模块编译时添加debug标示" class="headerlink" title="1、模块编译时添加debug标示"></a>1、模块编译时添加debug标示</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">FLAG</span><span class="hljs-operator">=</span>-gcflag <span class="hljs-string">&quot;all=-N -l&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2、容器配置新增开放2345端口-8088是原业务端口"><a href="#2、容器配置新增开放2345端口-8088是原业务端口" class="headerlink" title="2、容器配置新增开放2345端口(8088是原业务端口)"></a>2、容器配置新增开放2345端口(8088是原业务端口)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">kubectl</span> <span class="hljs-string">edit</span> <span class="hljs-string">deployment</span> <span class="hljs-string">api</span>   <span class="hljs-string">-n</span> <span class="hljs-string">carwyn</span><br><span class="hljs-attr">ports:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2345</span><br>   <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8088</span><br>   <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><h3 id="3、dlv容器总启动应用-如果需要结束进程，新开窗口执行-killall-9-api-dlv"><a href="#3、dlv容器总启动应用-如果需要结束进程，新开窗口执行-killall-9-api-dlv" class="headerlink" title="3、dlv容器总启动应用(如果需要结束进程，新开窗口执行 killall -9 api dlv)"></a>3、dlv容器总启动应用(如果需要结束进程，新开窗口执行 killall -9 api dlv)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dlv <span class="hljs-attribute">--listen</span>=:2345 <span class="hljs-attribute">--headless</span>=<span class="hljs-literal">true</span> <span class="hljs-attribute">--api-version</span>=2 --accept-multiclient exec ./demo<br></code></pre></td></tr></table></figure><h3 id="4、本地使用port-forward转发2345端口到容器的2345端口"><a href="#4、本地使用port-forward转发2345端口到容器的2345端口" class="headerlink" title="4、本地使用port-forward转发2345端口到容器的2345端口"></a>4、本地使用port-forward转发2345端口到容器的2345端口</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kubectl</span> -n carwyn port-forward pod/api-<span class="hljs-number">43</span>fd553f-fsa33434 <span class="hljs-number">2345</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>远程调试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>远程调试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压测</title>
    <link href="/2023/02/20/%E5%8E%8B%E6%B5%8B/"/>
    <url>/2023/02/20/%E5%8E%8B%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="常见的压测方式"><a href="#常见的压测方式" class="headerlink" title="常见的压测方式"></a>常见的压测方式</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">wrk: https://github.com/wg/wrk<br><br>ab: https://httpd.apache.org/docs/2.4/programs/ab.html<br><br>webbench<br></code></pre></td></tr></table></figure><h3 id="常见的性能指标"><a href="#常见的性能指标" class="headerlink" title="常见的性能指标"></a>常见的性能指标</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">并发数:是指系统同时处理的请求数，对于互联网系统而言，一般就是指同时访问系统的用户数<br>吞吐量(QPS 的最大值)：是指单位时间内系统处理请求的数量，体现的是系统的处理能力。我们一般用 TPS、 QPS 这样的指标来衡量。吞吐量还有平均吞吐量、峰值吞吐量、最低吞吐量之分<br>响应时间：一次事务的处理时间。通常指从一个请求发出，到服务器进行处理后返回，再到接收完毕应答数据的时间间隔。一般有平均响应时间、TP95、TP99 之分<br><br>QPS（TPS）= 并发数 / 平均响应时间<br>吞吐量理论值 = 并发数 / 平均响应时间<br>并发数 = QPS*平均响应时间<br><br>规律：<br>响应时间和吞吐量要达到一个平衡点，随着吞吐量的增加，响应时间会先维持一个点，然后会开始迅速加大，随之而来的是吞吐量也很难上去了。、<br>我们对响应时间是有要求的，因此我们不能只追求吞吐量，一定是在一个合理的响应时间内找到最大的吞吐量。<br>响应时间一定是在成功率的基础上的， 如果出现失败，那么这个响应时间是无效的。成功率一般要 100%<br></code></pre></td></tr></table></figure><h3 id="分析压测瓶颈的原因"><a href="#分析压测瓶颈的原因" class="headerlink" title="分析压测瓶颈的原因"></a>分析压测瓶颈的原因</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">我们分析系统性能问题，需要找准要点，这就要求我们的压测报告要确实有效，是要非常严谨的，条理清晰， 要一步一步分析出瓶颈，而且要明白为啥到了瓶颈，然后怎么优化？因此就要求我们要输出严谨的压测报告。这里有一些经验：<br><br>• 压测的时候，要找到一个性能拐点；如果压力一上来就达到瓶颈了，那么还需要往回调一点，直到找到一个最佳的性能拐点。系统性能是一个抛物线形态，到达性能峰值后继续施压会导致性能下降，因此我们压测最重要的就是找到那个最佳的性能拐点。因此整个施压过程逐步施压，到达性能峰值后继续施压，如果继续施压后性能不升反降就说明到了拐点了<br><br>• 如何分析性能瓶颈，找到 QPS 提升不上去的原因呢?<br><br>• QPS 不会一直上升，到某个点后就会持平甚至下降，出现性能拐点，此时就需要开始分析原因。<br><br>• 具体的方式就是，先抓没有到极限的 profile 情况(<span class="hljs-meta">cpu</span>,block,io,内存)，再抓刚好到极限的，最后抓已经超过极限的，然后分析这几种情况下，到底是哪个系统资源，或者外部接口导致了性能问题。<br><br>• 如果是某个组件或者外部服务是性能瓶颈点，那么还需要进一步分析下，是不是组件的使用姿势不对？是不是没处理好连接数？不能说一找到某个组件的问题就结束了，还需要进一步更深层的审视下。<br><br>• 分别知道单机和集群能够承载的性能和拐点<br><br>• 单台机器的最大 QPS 是多少？<br><br>• 平行扩展后的 QPS 又是多少，是线性增长么?（肯定不会线性增长, 到某个程度后相关资源一定都会出现瓶颈，关键是要找到对应的瓶颈点）<br><br>• 系统资源如何分析，举个 <span class="hljs-meta">CPU</span> 的例子<br><br>• 首先看 <span class="hljs-meta">CPU</span>，如果 <span class="hljs-meta">CPU</span> 没有跑满，则说明不是 <span class="hljs-meta">CPU</span> 的问题，就不用关心<span class="hljs-meta">CPU</span>，然后就要其他的资源如 io, swap, 内存, 网卡等<br><br>• 如果有多个 <span class="hljs-meta">CPU</span> 核心, 则观察每个核心的 <span class="hljs-meta">cpu</span> 的使用情况，不能光看整体的 <span class="hljs-meta">CPU</span> 使用率<br><br>• 如果 <span class="hljs-meta">CPU</span> 跑满了，那么抓 <span class="hljs-meta">CPU</span> 的 profile, 观测看看哪个调用比较耗时.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>压测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>压测</tag>
      
      <tag>性能分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go 依赖编译问题</title>
    <link href="/2023/01/31/Go-%E4%BE%9D%E8%B5%96%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/"/>
    <url>/2023/01/31/Go-%E4%BE%9D%E8%B5%96%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="go-vendor依赖处理"><a href="#go-vendor依赖处理" class="headerlink" title="go vendor依赖处理"></a>go vendor依赖处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除 go.sum/go.mod<br>go mod init 项目名<br>go mod tidy<br>go mod vendor<br>go get -v -u github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common //拉取新添加的依赖到本地<br>go mod download<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>go编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法精解</title>
    <link href="/2023/01/26/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%A7%A3/"/>
    <url>/2023/01/26/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="算法的基本"><a href="#算法的基本" class="headerlink" title="算法的基本"></a>算法的基本</h2><p><strong>时间复杂度</strong>：程序运行的时间增长程度，随着数据量的增加而增加<br><strong>空间复杂度</strong>：程序运行的空间增长程度，随着数据量的增加而增加<br>因为时间一去不返，空间复杂度可以通过增加内存解决；通常我们重点关注时间复杂度<br>我们通过大O表示复杂度<br>常见复杂度的大小<br>     O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;(n^2)&lt;(n^3)&lt;(2^n)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</p><h2 id="数组-amp-amp-链表类型"><a href="#数组-amp-amp-链表类型" class="headerlink" title="数组&amp;&amp;链表类型"></a>数组&amp;&amp;链表类型</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><pre><code class="hljs">题目:写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：    F(0) = 0, F(1)= 1    F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.    斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出</code></pre><blockquote><p>方法一：递归，时间复杂度 2^n  类似二叉树</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span>  fib(n-<span class="hljs-number">1</span>) + fib(n-<span class="hljs-number">2</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>方法二：递归优化，时间复杂度 n</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>     <span class="hljs-keyword">private</span> HashMap&lt;Integer, Integer&gt;  temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>          <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( n == <span class="hljs-number">1</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != temp.get(n)) &#123;<br>               <span class="hljs-keyword">return</span> temp.get(n);<br>          &#125;<br>          <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (fib(n-<span class="hljs-number">1</span>) + fib(n-<span class="hljs-number">2</span>));<br>               temp.put(n,result);<br>               <span class="hljs-keyword">return</span>  result;<br>          &#125;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方案三 循环 时间复杂度 n</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>       <span class="hljs-keyword">if</span> (n &lt;<span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> n;<br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">prepre</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            result = (prepre + pre);<br>            prepre = pre;<br>            pre = result; <br>       &#125;<br>       <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><pre><code class="hljs">  给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 和为目标值 target的那两个整数，并返回它们的数组下标。  你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。  你可以按任意顺序返回答案。</code></pre><blockquote><p>方法一：暴力循环  时间复杂度为 n^2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j  &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (target == nums[i] + nums[j]) &#123;<br>                       result[<span class="hljs-number">0</span>] = i;<br>                       result[<span class="hljs-number">1</span>] = j;<br>                       <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>方法二：存储临时变量，减少循环层级  时间复杂度为 n</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [<span class="hljs-number">2</span>];<br>        HashMap&lt;Integer,Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (temp.get(nums[i]) != <span class="hljs-literal">null</span>) &#123;<br>                    result[<span class="hljs-number">0</span>] = temp.get(nums[i]);<br>                    result[<span class="hljs-number">1</span>] = i;          <br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                temp.put(target-nums[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="两数之和-1"><a href="#两数之和-1" class="headerlink" title="两数之和"></a>两数之和</h3><pre><code class="hljs">  给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 和为目标值 target的那两个整数，并返回它们的数组下标。  你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。  你可以按任意顺序返回答案。</code></pre><blockquote><p>方法一：暴力循环  时间复杂度为 n^2</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bash脚本</title>
    <link href="/2023/01/22/Bash%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/01/22/Bash%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="1-输出数据库数据到文本"><a href="#1-输出数据库数据到文本" class="headerlink" title="1. 输出数据库数据到文本"></a>1. 输出数据库数据到文本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">:&gt; old-subuin-list <br><br>bash mysql-hk.sh &gt;&gt;old-subuin-list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">select zone as &#x27;&#x27;, uin as &#x27;&#x27;, sub_account_uin  as &#x27;&#x27;,app_id as &#x27;&#x27; from cn_apigw as b, (select id  from cn_apigw where status=&quot;Running&quot; group by uin, app_id , id, sub_account_uin order by uin) as a where a.id = b.id;</span><br><span class="hljs-string">EOF</span><br><br>bash mysql-gz.sh &gt;&gt;old-subuin-list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">select zone as &#x27;&#x27;, uin as &#x27;&#x27;, sub_account_uin  as &#x27;&#x27;,app_id as &#x27;&#x27; from cn_apigw as b, (select id  from cn_apigw where status=&quot;Running&quot; group by uin, app_id , id, sub_account_uin order by uin) as a where a.id = b.id;</span><br><span class="hljs-string">EOF</span><br><br>bash mysql-sh.sh &gt;&gt;old-subuin-list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">select zone as &#x27;&#x27;, uin as &#x27;&#x27;, sub_account_uin  as &#x27;&#x27;,app_id as &#x27;&#x27; from cn_apigw as b, (select id  from cn_apigw where status=&quot;Running&quot; group by uin, app_id , id, sub_account_uin order by uin) as a where a.id = b.id;</span><br><span class="hljs-string">EOF</span><br>bash mysql-bj.sh &gt;&gt;old-subuin-list &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">select zone as &#x27;&#x27;, uin as &#x27;&#x27;, sub_account_uin  as &#x27;&#x27;,app_id as &#x27;&#x27; from cn_apigw as b, (select id  from cn_apigw where status=&quot;Running&quot; group by uin, app_id , id, sub_account_uin order by uin) as a where a.id = b.id;</span><br><span class="hljs-string">EOF</span><br><br>sed -ri <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> old-subuin-list<br></code></pre></td></tr></table></figure><h4 id="mysql-bj-sh脚本示例"><a href="#mysql-bj-sh脚本示例" class="headerlink" title="mysql-bj.sh脚本示例"></a>mysql-bj.sh脚本示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h11.15.126.6 -uapigw -p<span class="hljs-string">&#x27;ap@890&#x27;</span> -Dnig<br></code></pre></td></tr></table></figure><h3 id="2-交互式数据库脚本"><a href="#2-交互式数据库脚本" class="headerlink" title="2. 交互式数据库脚本"></a>2. 交互式数据库脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#!bin/bash</span><br><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;May I ask your rm instance_id: &quot;</span> gateway_id<br><br><span class="hljs-built_in">read</span> -p  <span class="hljs-string">&quot;are you sure to rm <span class="hljs-variable">$gateway_id</span> ?[y/n]&quot;</span> input<br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$input</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;y&quot;</span> ]];<span class="hljs-keyword">then</span><br><br>  exist=$(<span class="hljs-built_in">source</span> ./mysql-hk.sh <span class="hljs-string">&quot;SELECT 1  FROM cn_apigw  WHERE gateway_id=&#x27;<span class="hljs-variable">$gateway_id</span>&#x27;&quot;</span> | awk <span class="hljs-string">&#x27;NR ==2 &#123;print $1&#125;&#x27;</span>)<br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-variable">$exist</span><br><br>  <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$exist</span> = 1 ]];<span class="hljs-keyword">then</span><br><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hk&quot;</span><br><br>     <span class="hljs-built_in">read</span> -p  <span class="hljs-string">&quot;are you sure to rm <span class="hljs-variable">$gateway_id</span> ?[y/n]&quot;</span> input<br><br>     <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;y&quot;</span> ]];<span class="hljs-keyword">then</span><br><br>       result=$(<span class="hljs-built_in">source</span> ./mysql-hk.sh <span class="hljs-string">&quot;select zone as &#x27;&#x27;, uin as &#x27;&#x27;,sub_account_uin as &#x27;&#x27;,app_id as &#x27;&#x27;,gateway_id as &#x27;&#x27; from cn_apigw where gateway_id=&quot;</span><span class="hljs-variable">$gateway_id</span><span class="hljs-string">&quot;  order by uin; delete from cn_apigw where gateway_id=&quot;</span><span class="hljs-variable">$gateway_id</span><span class="hljs-string">&quot;&quot;</span>)<br><br>       <span class="hljs-built_in">echo</span> <span class="hljs-variable">$result</span><br><br>     <span class="hljs-keyword">else</span><br><br>       <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Cancelled rm&quot;</span><br><br>     <span class="hljs-keyword">fi</span><br><br>  <span class="hljs-keyword">else</span><br><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hk does not exist <span class="hljs-variable">$gateway_id</span>&quot;</span><br><br>  <span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">else</span><br><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Cancelled rm&quot;</span><br><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><h4 id="mysql-hk-sh脚本示例"><a href="#mysql-hk-sh脚本示例" class="headerlink" title="mysql-hk.sh脚本示例"></a>mysql-hk.sh脚本示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#!bin/bash</span><br>mysql -h127.0.0.1  -uroot -p<span class="hljs-string">&#x27;password&#x27;</span> -Dcn &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">$1</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bash</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络抓包</title>
    <link href="/2023/01/19/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/"/>
    <url>/2023/01/19/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h4 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i any -nn host 192.168.233.1 -w test.pcap<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器编排 Kubernets</title>
    <link href="/2023/01/19/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92-Kubernets/"/>
    <url>/2023/01/19/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92-Kubernets/</url>
    
    <content type="html"><![CDATA[<h4 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl delete pod cloud-api-manag-6469989887-tw9rk  //删除pod<br><br></code></pre></td></tr></table></figure><h4 id="进入pod"><a href="#进入pod" class="headerlink" title="进入pod"></a>进入pod</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl <span class="hljs-built_in">exec</span>  tools-qci-operator-76d898686-rskmn -ntce -it bash<br><br></code></pre></td></tr></table></figure><h4 id="修改pod配置"><a href="#修改pod配置" class="headerlink" title="修改pod配置"></a>修改pod配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl edit deployment apigw-v3   -n carwynma  //修改pod配置修改<br><br></code></pre></td></tr></table></figure><h4 id="查看pods状态"><a href="#查看pods状态" class="headerlink" title="查看pods状态"></a>查看pods状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl get pod -o wide -n carwynma  //查看状态<br><br></code></pre></td></tr></table></figure><h4 id="查看ns和ip"><a href="#查看ns和ip" class="headerlink" title="查看ns和ip"></a>查看ns和ip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>kubectl get svc -n carwynma     //查看namespace的状态和upstream的ip<br><br></code></pre></td></tr></table></figure><h4 id="拷贝pod文到本地"><a href="#拷贝pod文到本地" class="headerlink" title="拷贝pod文到本地"></a>拷贝pod文到本地</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">cp</span> -n cluster-5ffjdk -c apigw-ld cluster-5ffjdk:usr/local/services/test.pacp ./test.pacp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>容器 Docker</title>
    <link href="/2023/01/19/%E5%AE%B9%E5%99%A8-Docker/"/>
    <url>/2023/01/19/%E5%AE%B9%E5%99%A8-Docker/</url>
    
    <content type="html"><![CDATA[<h4 id="登陆远程镜像仓库"><a href="#登陆远程镜像仓库" class="headerlink" title="登陆远程镜像仓库"></a>登陆远程镜像仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker login -u 100017676953 -p <span class="hljs-string">&#x27;CTCD*@fight#2648&#x27;</span>  ccr.ccs.com/api-images<br><br></code></pre></td></tr></table></figure><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>当前路径准备好Dockerfile<br><br>docker build  --no-cache  -f Dockerfile . -t ccr.ccs.com/api-images/apig-ld:v1.7  --progress=plain &gt;&gt; builder.log   //不使用缓存构建，且输出构建日志到builder.log<br><br></code></pre></td></tr></table></figure><h4 id="显示本地镜像"><a href="#显示本地镜像" class="headerlink" title="显示本地镜像"></a>显示本地镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker images|<span class="hljs-built_in">head</span> -n3<br><br></code></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker push hub.com/api/inspect:0.0.3<br><br></code></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker run -dit hub.com/api/inspect:0.0.1<br><br></code></pre></td></tr></table></figure><h4 id="进入实例"><a href="#进入实例" class="headerlink" title="进入实例"></a>进入实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker <span class="hljs-built_in">exec</span> -it a3549e935718716d096dc  bash<br><br></code></pre></td></tr></table></figure><h4 id="清理docker空间"><a href="#清理docker空间" class="headerlink" title="清理docker空间"></a>清理docker空间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker system <span class="hljs-built_in">df</span><br><br>docker system prune --all --force<br><br></code></pre></td></tr></table></figure><h4 id="更改镜像版本号"><a href="#更改镜像版本号" class="headerlink" title="更改镜像版本号"></a>更改镜像版本号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>docker images -q --filter reference=hub.com/tceforqci_arm/api-nginx-build:v1  //检索需要修改<span class="hljs-built_in">id</span>的镜像<br><br>docker tag  34f3841dbc96    hub.com/tceforqci_arm/api-v1-build-env:v1.0.0 //更改<span class="hljs-built_in">id</span><br><br>docker push hub.com/tceforqci_arm/api-v1-build-env:v1.0.0 //推送镜像<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2023/01/19/Linux/"/>
    <url>/2023/01/19/Linux/</url>
    
    <content type="html"><![CDATA[<h2 id="cpu篇"><a href="#cpu篇" class="headerlink" title="cpu篇"></a>cpu篇</h2><h4 id="1、具有相同core-id的cpu是同一个core的超线程"><a href="#1、具有相同core-id的cpu是同一个core的超线程" class="headerlink" title="1、具有相同core id的cpu是同一个core的超线程"></a>1、具有相同core id的cpu是同一个core的超线程</h4><h4 id="2、具有相同physical-id的cpu是同一颗cpu封装的线程或者cores"><a href="#2、具有相同physical-id的cpu是同一颗cpu封装的线程或者cores" class="headerlink" title="2、具有相同physical id的cpu是同一颗cpu封装的线程或者cores"></a>2、具有相同physical id的cpu是同一颗cpu封装的线程或者cores</h4><h4 id="逻辑CPU个数"><a href="#逻辑CPU个数" class="headerlink" title="逻辑CPU个数"></a>逻辑CPU个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;processor&quot;</span> | <span class="hljs-built_in">wc</span> -l<br><br></code></pre></td></tr></table></figure><h4 id="物理CPU个数"><a href="#物理CPU个数" class="headerlink" title="物理CPU个数"></a>物理CPU个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;physical id&quot;</span> | <span class="hljs-built_in">sort</span> -u | <span class="hljs-built_in">wc</span> -l<br><br></code></pre></td></tr></table></figure><h4 id="每个物理CPU中Core的个数："><a href="#每个物理CPU中Core的个数：" class="headerlink" title="每个物理CPU中Core的个数："></a>每个物理CPU中Core的个数：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;cpu cores&quot;</span> | <span class="hljs-built_in">uniq</span> | awk -F: <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="查看core-id的数量-即为所有物理CPU上的core的个数"><a href="#查看core-id的数量-即为所有物理CPU上的core的个数" class="headerlink" title="查看core id的数量,即为所有物理CPU上的core的个数"></a>查看core id的数量,即为所有物理CPU上的core的个数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep <span class="hljs-string">&quot;core id&quot;</span> | <span class="hljs-built_in">uniq</span> |  <span class="hljs-built_in">wc</span> -l<br><br></code></pre></td></tr></table></figure><h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><p>以下命令拷贝到 .bashrc</p><h4 id="快速-拷贝本地文件和登录容器"><a href="#快速-拷贝本地文件和登录容器" class="headerlink" title="快速 拷贝本地文件和登录容器"></a>快速 拷贝本地文件和登录容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">kcp</span></span>() &#123;<br>  pod=$(kubectl get pod -1 app=<span class="hljs-variable">$1</span> |grep Running |<span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f 1)<br>  kubectl <span class="hljs-built_in">cp</span> <span class="hljs-variable">$2</span> <span class="hljs-variable">$pod</span>:<span class="hljs-variable">$3</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">kexec</span></span>()&#123;<br>  pod=$(kubectl get pod -1 app=<span class="hljs-variable">$1</span> |grep Running |<span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f 1)<br>  kubectl <span class="hljs-built_in">exec</span> -it <span class="hljs-variable">$pod</span> -- bash<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>版本控制 Git</title>
    <link href="/2023/01/19/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-Git/"/>
    <url>/2023/01/19/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-Git/</url>
    
    <content type="html"><![CDATA[<h3 id="git参考文档"><a href="#git参考文档" class="headerlink" title="git参考文档"></a><a href="https://www.yiibai.com/git/git_tag.html">git参考文档</a></h3><h4 id="clone项目及其子项目"><a href="#clone项目及其子项目" class="headerlink" title="clone项目及其子项目"></a>clone项目及其子项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/imtianx/MainProject.git<br></code></pre></td></tr></table></figure><h4 id="GItmodule"><a href="#GItmodule" class="headerlink" title="GItmodule"></a>GItmodule</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule init<br>git submodule update<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure><h4 id="回退远程分支至某commitid"><a href="#回退远程分支至某commitid" class="headerlink" title="回退远程分支至某commitid"></a>回退远程分支至某commitid</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --hard  committeid<br>git log --oneline<br>git push  -f<br></code></pre></td></tr></table></figure><h4 id="放弃本地所有修改"><a href="#放弃本地所有修改" class="headerlink" title="放弃本地所有修改"></a>放弃本地所有修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout .<br></code></pre></td></tr></table></figure><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin :***<br></code></pre></td></tr></table></figure><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch -D  ***<br></code></pre></td></tr></table></figure><h4 id="撤销本地commit并保留代码"><a href="#撤销本地commit并保留代码" class="headerlink" title="撤销本地commit并保留代码"></a>撤销本地commit并保留代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --soft HEAD~1<br></code></pre></td></tr></table></figure><h4 id="撤销本地commit不保留代码"><a href="#撤销本地commit不保留代码" class="headerlink" title="撤销本地commit不保留代码"></a>撤销本地commit不保留代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset --hard HEAD<br></code></pre></td></tr></table></figure><h4 id="撤销add"><a href="#撤销add" class="headerlink" title="撤销add"></a>撤销add</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git reset HEAD  *<br></code></pre></td></tr></table></figure><h4 id="合并忽律空白冲突"><a href="#合并忽律空白冲突" class="headerlink" title="合并忽律空白冲突"></a>合并忽律空白冲突</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git merge -Xignore-space-change whitespace<br></code></pre></td></tr></table></figure><h4 id="合并某个分支单个commit"><a href="#合并某个分支单个commit" class="headerlink" title="合并某个分支单个commit"></a>合并某个分支单个commit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout master    //先切换到要合并的分支<br>git cherry-pick 62ecb3    //再使用cherry-pick命令<br></code></pre></td></tr></table></figure><h4 id="按照固定格式查看git记录"><a href="#按照固定格式查看git记录" class="headerlink" title="按照固定格式查看git记录"></a>按照固定格式查看git记录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git log --pretty=format:&quot;%h:%an, %ar  : %s&quot;<br></code></pre></td></tr></table></figure><h4 id="追加本地修改到上次commit"><a href="#追加本地修改到上次commit" class="headerlink" title="追加本地修改到上次commit"></a>追加本地修改到上次commit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git commit --amend<br></code></pre></td></tr></table></figure><h4 id="合并当前修改到某次commit"><a href="#合并当前修改到某次commit" class="headerlink" title="合并当前修改到某次commit"></a>合并当前修改到某次commit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout -b rebase_tmp  //创临时分支用于rebase<br>git stash   //暂存本地修改<br>git rebase -i f744c32^   //移动head到要合并的commit的父提交处<br>找到需要合并的commit, 将行首的pick改成edit, 按esc, 输入:wq退出<br>git stash pop<br>git add .<br>git commit --amend<br>git rebase --continue<br></code></pre></td></tr></table></figure><h4 id="将本地项目推到远程空仓库"><a href="#将本地项目推到远程空仓库" class="headerlink" title="将本地项目推到远程空仓库"></a>将本地项目推到远程空仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs git">git init<br>git add .<br>git commit -m &#x27;init&#x27;<br>git remote add origin git@git.woa.com:qcloud_middleware/apigw/compliance.git<br>git pull origin master --allow-unrelated-histories<br>git push -u origin master <br></code></pre></td></tr></table></figure><h4 id="取消远程仓库地址关联"><a href="#取消远程仓库地址关联" class="headerlink" title="取消远程仓库地址关联"></a>取消远程仓库地址关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote <span class="hljs-built_in">rm</span> origin<br></code></pre></td></tr></table></figure><h4 id="重新关联远程仓库地址"><a href="#重新关联远程仓库地址" class="headerlink" title="重新关联远程仓库地址"></a>重新关联远程仓库地址</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://github.com/developers-youcong/Metronic_Template.git<br></code></pre></td></tr></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag -a v1.4 -m <span class="hljs-string">&#x27;my version 1.4&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag -d v1.0<br></code></pre></td></tr></table></figure><h4 id="某个commit补标签"><a href="#某个commit补标签" class="headerlink" title="某个commit补标签"></a>某个commit补标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag -a v1.2 9fceb02<br></code></pre></td></tr></table></figure><h4 id="推送某个标签到远程"><a href="#推送某个标签到远程" class="headerlink" title="推送某个标签到远程"></a>推送某个标签到远程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin v1.5<br></code></pre></td></tr></table></figure><h4 id="将本地标签全部推送远程"><a href="#将本地标签全部推送远程" class="headerlink" title="将本地标签全部推送远程"></a>将本地标签全部推送远程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --tags<br></code></pre></td></tr></table></figure><h4 id="将连续多个commit合并成一个commit"><a href="#将连续多个commit合并成一个commit" class="headerlink" title="将连续多个commit合并成一个commit"></a>将连续多个commit合并成一个commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>git rebase -i d6c2b9f83c764306a83badf653f3d08a95bad1cd   //变基到需要合并commit的前一个commit<br><br>然后你会看到下面的界面  pick是最终合并的<span class="hljs-built_in">id</span>  把其他都改成 s<br><br>pick e1f5627 v2---&gt;v3接口优化<br><br>s 9a0fb8e 解决<br><br>s 7f49f21 修改<br><br>s 828ae3b sh<br><br>s 2766da3 modules<br><br>然后保存,连续两次保存<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>版本控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>版本控制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/16/hello-world/"/>
    <url>/2023/01/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
